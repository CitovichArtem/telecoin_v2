{"ast":null,"code":"let leagues=['Bronze','Silver','Gold','Platinum','Diamond','Epic','Legendary','Master','Grandmaster','Lord','Creator'];let arr;let arrString=localStorage.getItem('arr');console.log(arrString);if(arrString){// Если данные есть, преобразуем их обратно в Map\narr=new Map(Object.entries(JSON.parse(arrString)));}else{// Если данных нет, создаем новый объект Map и задаем начальные значения\narr=new Map();arr.set('balance','10000').set('profitTap','1').set('moneyToUp','25000').set('profitHour','0').set('myLeague','Bronze').set('energy','1000').set('energyLimit','1000');// Преобразуем Map в объект и сохраняем в localStorage\nconst obj=Object.fromEntries(arr);localStorage.setItem('arr',JSON.stringify(obj));}export function saveToLocalStorage(){const obj=Object.fromEntries(arr);localStorage.setItem('arr',JSON.stringify(obj));}// Выводим arr в консоль для проверки\nconsole.log(arr);export default arr;","map":{"version":3,"names":["leagues","arr","arrString","localStorage","getItem","console","log","Map","Object","entries","JSON","parse","set","obj","fromEntries","setItem","stringify","saveToLocalStorage"],"sources":["C:/Users/Артём/Documents/GitHub/telecoin_v2/src/resourses.js"],"sourcesContent":["\r\nlet leagues = ['Bronze', 'Silver', 'Gold', 'Platinum', 'Diamond', 'Epic', 'Legendary', 'Master', 'Grandmaster', 'Lord', 'Creator'];\r\n\r\nlet arr;    \r\nlet arrString = localStorage.getItem('arr');\r\nconsole.log(arrString);\r\nif (arrString) {\r\n    // Если данные есть, преобразуем их обратно в Map\r\n    arr = new Map(Object.entries(JSON.parse(arrString)));\r\n\r\n} else {\r\n    // Если данных нет, создаем новый объект Map и задаем начальные значения\r\n    arr = new Map();\r\n    arr\r\n        .set('balance', '10000')\r\n        .set('profitTap', '1')\r\n        .set('moneyToUp', '25000')\r\n        .set('profitHour', '0')\r\n        .set('myLeague', 'Bronze')\r\n        .set('energy', '1000')\r\n        .set('energyLimit', '1000');\r\n\r\n    // Преобразуем Map в объект и сохраняем в localStorage\r\n    const obj = Object.fromEntries(arr);\r\n    localStorage.setItem('arr', JSON.stringify(obj));\r\n}\r\nexport function saveToLocalStorage() {\r\n    const obj = Object.fromEntries(arr);\r\n    localStorage.setItem('arr', JSON.stringify(obj));\r\n}\r\n// Выводим arr в консоль для проверки\r\nconsole.log(arr);\r\n\r\nexport default arr"],"mappings":"AACA,GAAI,CAAAA,OAAO,CAAG,CAAC,QAAQ,CAAE,QAAQ,CAAE,MAAM,CAAE,UAAU,CAAE,SAAS,CAAE,MAAM,CAAE,WAAW,CAAE,QAAQ,CAAE,aAAa,CAAE,MAAM,CAAE,SAAS,CAAC,CAElI,GAAI,CAAAC,GAAG,CACP,GAAI,CAAAC,SAAS,CAAGC,YAAY,CAACC,OAAO,CAAC,KAAK,CAAC,CAC3CC,OAAO,CAACC,GAAG,CAACJ,SAAS,CAAC,CACtB,GAAIA,SAAS,CAAE,CACX;AACAD,GAAG,CAAG,GAAI,CAAAM,GAAG,CAACC,MAAM,CAACC,OAAO,CAACC,IAAI,CAACC,KAAK,CAACT,SAAS,CAAC,CAAC,CAAC,CAExD,CAAC,IAAM,CACH;AACAD,GAAG,CAAG,GAAI,CAAAM,GAAG,CAAC,CAAC,CACfN,GAAG,CACEW,GAAG,CAAC,SAAS,CAAE,OAAO,CAAC,CACvBA,GAAG,CAAC,WAAW,CAAE,GAAG,CAAC,CACrBA,GAAG,CAAC,WAAW,CAAE,OAAO,CAAC,CACzBA,GAAG,CAAC,YAAY,CAAE,GAAG,CAAC,CACtBA,GAAG,CAAC,UAAU,CAAE,QAAQ,CAAC,CACzBA,GAAG,CAAC,QAAQ,CAAE,MAAM,CAAC,CACrBA,GAAG,CAAC,aAAa,CAAE,MAAM,CAAC,CAE/B;AACA,KAAM,CAAAC,GAAG,CAAGL,MAAM,CAACM,WAAW,CAACb,GAAG,CAAC,CACnCE,YAAY,CAACY,OAAO,CAAC,KAAK,CAAEL,IAAI,CAACM,SAAS,CAACH,GAAG,CAAC,CAAC,CACpD,CACA,MAAO,SAAS,CAAAI,kBAAkBA,CAAA,CAAG,CACjC,KAAM,CAAAJ,GAAG,CAAGL,MAAM,CAACM,WAAW,CAACb,GAAG,CAAC,CACnCE,YAAY,CAACY,OAAO,CAAC,KAAK,CAAEL,IAAI,CAACM,SAAS,CAACH,GAAG,CAAC,CAAC,CACpD,CACA;AACAR,OAAO,CAACC,GAAG,CAACL,GAAG,CAAC,CAEhB,cAAe,CAAAA,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}